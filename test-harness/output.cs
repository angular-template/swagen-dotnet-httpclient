// ------------------------------
// <auto-generated>
//     Generated using the swagen tool
//     Generator: dotnet-httpclient
//     Mode: csharp
// </auto-generated>
// ------------------------------
// Tavant.Rpos.Api
// Tavant RPOS UI Services API
// Base URL: http://rpos-dev.azurewebsites.net/

using System;
using System.Collections.Generic;
using System.Linq;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text;
using System.Threading.Tasks;

using Newtonsoft.Json;
using Newtonsoft.Json.Serialization;

using __models = MyNamespace.Services;

namespace MyNamespace.Services
{

    public sealed partial class AssetsLiabilitiesClient
    {
        private readonly HttpClient _client;
        private readonly JsonSerializerSettings _serializerSettings;
        private Uri _baseUri = new Uri("http://rpos-dev.azurewebsites.net/", UriKind.Absolute);

        public AssetsLiabilitiesClient()
        {
            _client = new HttpClient();
            InitializeClient(_client);
            _serializerSettings = new JsonSerializerSettings();
            InitializeJsonSerializer(_serializerSettings);
        }

        partial void InitializeClient(HttpClient client);
        partial void InitializeJsonSerializer(JsonSerializerSettings settings);

        public Uri BaseUri
        {
            get => _baseUrl;
            set => _baseUrl = value ?? throw new ArgumentNullException(nameof(value));
        }

        public async Task<__models.AssetsLiabilities> assetsLiabilitiesGetAssetsLiabilities(string applicationId = default(string), string borrowerId = default(string), string coBorrowerId = default(string))
        {
            string resourceUrl = "/api/assets-liabilities";

            var queryParams = new Dictionary<string, object>
            {
                ["applicationId"] = applicationId,
                ["borrowerId"] = borrowerId,
                ["coBorrowerId"] = coBorrowerId,
            };

            Uri serviceUrl = BuildServiceUrl(resourceUrl, queryParams);

            using (var request = new HttpRequestMessage(HttpMethod.Get, serviceUrl))
            {
                request.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue("application/json"));

                HttpResponseMessage response = await _client.SendAsync(request).ConfigureAwait(false);

                int statusCode = (int)response.StatusCode;
                string responseContent = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                switch (statusCode)
                {
                    case 200:
                        var result200 = JsonConvert.DeserializeObject<__models.AssetsLiabilities>(responseContent);
                        return result200;
                    case 500:
                        var result500 = JsonConvert.DeserializeObject<__models.Error>(responseContent);
                        throw new WebApiClientException<__models.Error>("A server side error occurred.", statusCode, result500);
                    default:
                        throw new WebApiClientException($"Unexpected status code was returned from {serviceUrl}", statusCode, responseContent);
                }
            }
        }

        public async Task<__models.AssetsLiabilities> assetsLiabilitiesSaveAssetsLiabilities(__models.AssetsLiabilities assetsLiabilities)
        {
            if (assetsLiabilities == null)
                throw new ArgumentNullException(nameof(assetsLiabilities));

            string resourceUrl = "/api/assets-liabilities";

            Uri serviceUrl = BuildServiceUrl(resourceUrl);

            using (var request = new HttpRequestMessage(HttpMethod.Put, serviceUrl))
            {
                var content = new StringContent(JsonConvert.SerializeObject(assetsLiabilities, _serializerSettings));
                content.Headers.ContentType.MediaType = "application/json";
                request.Content = content;
                request.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue("application/json"));

                HttpResponseMessage response = await _client.SendAsync(request).ConfigureAwait(false);

                int statusCode = (int)response.StatusCode;
                string responseContent = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                switch (statusCode)
                {
                    case 200:
                        var result200 = JsonConvert.DeserializeObject<__models.AssetsLiabilities>(responseContent);
                        return result200;
                    case 500:
                        var result500 = JsonConvert.DeserializeObject<__models.Error>(responseContent);
                        throw new WebApiClientException<__models.Error>("A server side error occurred.", statusCode, result500);
                    default:
                        throw new WebApiClientException($"Unexpected status code was returned from {serviceUrl}", statusCode, responseContent);
                }
            }
        }

        private Uri BuildServiceUrl(string relativeUrl, IDictionary<string, object> queryParams = null)
        {
            relativeUrl = relativeUrl ?? "";
            if (queryParams?.Count > 0)
            {
                string queryString = queryParams.Aggregate(new StringBuilder(), (aggregate, kvp) =>
                {
                    aggregate.Append(aggregate.Length == 0 ? "?" : "&")
                        .Append(Uri.EscapeUriString(kvp.Key));
                    if (kvp.Value != null)
                        aggregate.Append("=").Append(Uri.EscapeUriString(kvp.Value.ToString()));
                    return aggregate;
                }).ToString();
                relativeUrl += queryString;
            }
            if (!Uri.TryCreate(BaseUrl, relativeUrl, out Uri serviceUrl))
                throw new UriFormatException($"Could not create an absolute URL from base URL '{BaseUrl}' and relative URL '{relativeUrl}'.");
            return serviceUrl;
        }
    }

    public sealed partial class DataClient
    {
        private readonly HttpClient _client;
        private readonly JsonSerializerSettings _serializerSettings;
        private Uri _baseUri = new Uri("http://rpos-dev.azurewebsites.net/", UriKind.Absolute);

        public DataClient()
        {
            _client = new HttpClient();
            InitializeClient(_client);
            _serializerSettings = new JsonSerializerSettings();
            InitializeJsonSerializer(_serializerSettings);
        }

        partial void InitializeClient(HttpClient client);
        partial void InitializeJsonSerializer(JsonSerializerSettings settings);

        public Uri BaseUri
        {
            get => _baseUrl;
            set => _baseUrl = value ?? throw new ArgumentNullException(nameof(value));
        }

        public async Task<__models.BranchSearchResult> branchSearchBranches(int startRecord = default(int), int recordCount = default(int))
        {
            string resourceUrl = "/data/branches";

            var queryParams = new Dictionary<string, object>
            {
                ["startRecord"] = startRecord,
                ["recordCount"] = recordCount,
            };

            Uri serviceUrl = BuildServiceUrl(resourceUrl, queryParams);

            using (var request = new HttpRequestMessage(HttpMethod.Get, serviceUrl))
            {
                request.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue("application/json"));

                HttpResponseMessage response = await _client.SendAsync(request).ConfigureAwait(false);

                int statusCode = (int)response.StatusCode;
                string responseContent = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                switch (statusCode)
                {
                    case 200:
                        var result200 = JsonConvert.DeserializeObject<__models.BranchSearchResult>(responseContent);
                        return result200;
                    case 500:
                        var result500 = JsonConvert.DeserializeObject<__models.Error>(responseContent);
                        throw new WebApiClientException<__models.Error>("A server side error occurred.", statusCode, result500);
                    default:
                        throw new WebApiClientException($"Unexpected status code was returned from {serviceUrl}", statusCode, responseContent);
                }
            }
        }

        public async Task<__models.Branch> branchUpsertBranches(IReadOnlyList<__models.Branch> branches)
        {
            if (branches == null)
                throw new ArgumentNullException(nameof(branches));

            string resourceUrl = "/data/branches";

            Uri serviceUrl = BuildServiceUrl(resourceUrl);

            using (var request = new HttpRequestMessage(HttpMethod.Post, serviceUrl))
            {
                var content = new StringContent(JsonConvert.SerializeObject(branches, _serializerSettings));
                content.Headers.ContentType.MediaType = "application/json";
                request.Content = content;
                request.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue("application/json"));

                HttpResponseMessage response = await _client.SendAsync(request).ConfigureAwait(false);

                int statusCode = (int)response.StatusCode;
                string responseContent = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                switch (statusCode)
                {
                    case 200:
                        var result200 = JsonConvert.DeserializeObject<__models.Branch>(responseContent);
                        return result200;
                    case 400:
                        throw new WebApiClientException("A server side error occurred.", statusCode, responseContent);
                    case 500:
                        var result500 = JsonConvert.DeserializeObject<__models.Error>(responseContent);
                        throw new WebApiClientException<__models.Error>("A server side error occurred.", statusCode, result500);
                    default:
                        throw new WebApiClientException($"Unexpected status code was returned from {serviceUrl}", statusCode, responseContent);
                }
            }
        }

        public async Task<__models.Branch> branchGetBranch(string id)
        {
            if (id == null)
                throw new ArgumentNullException(nameof(id));

            string resourceUrl = "/data/branches/{id}"
                .Replace("{id}", Uri.EscapeUriString(id?.ToString()));

            Uri serviceUrl = BuildServiceUrl(resourceUrl);

            using (var request = new HttpRequestMessage(HttpMethod.Get, serviceUrl))
            {
                request.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue("application/json"));

                HttpResponseMessage response = await _client.SendAsync(request).ConfigureAwait(false);

                int statusCode = (int)response.StatusCode;
                string responseContent = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                switch (statusCode)
                {
                    case 200:
                        var result200 = JsonConvert.DeserializeObject<__models.Branch>(responseContent);
                        return result200;
                    case 404:
                        throw new WebApiClientException("A server side error occurred.", statusCode, responseContent);
                    case 500:
                        var result500 = JsonConvert.DeserializeObject<__models.Error>(responseContent);
                        throw new WebApiClientException<__models.Error>("A server side error occurred.", statusCode, result500);
                    default:
                        throw new WebApiClientException($"Unexpected status code was returned from {serviceUrl}", statusCode, responseContent);
                }
            }
        }

        public async Task<object> branchDeleteBranch(string id)
        {
            if (id == null)
                throw new ArgumentNullException(nameof(id));

            string resourceUrl = "/data/branches/{id}"
                .Replace("{id}", Uri.EscapeUriString(id?.ToString()));

            Uri serviceUrl = BuildServiceUrl(resourceUrl);

            using (var request = new HttpRequestMessage(HttpMethod.Delete, serviceUrl))
            {
                request.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue("application/json"));

                HttpResponseMessage response = await _client.SendAsync(request).ConfigureAwait(false);

                int statusCode = (int)response.StatusCode;
                string responseContent = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                switch (statusCode)
                {
                    case 200:
                        var result200 = JsonConvert.DeserializeObject<object>(responseContent);
                        return result200;
                    case 204:
                        throw new WebApiClientException("A server side error occurred.", statusCode, responseContent);
                    case 500:
                        var result500 = JsonConvert.DeserializeObject<__models.Error>(responseContent);
                        throw new WebApiClientException<__models.Error>("A server side error occurred.", statusCode, result500);
                    default:
                        throw new WebApiClientException($"Unexpected status code was returned from {serviceUrl}", statusCode, responseContent);
                }
            }
        }

        private Uri BuildServiceUrl(string relativeUrl, IDictionary<string, object> queryParams = null)
        {
            relativeUrl = relativeUrl ?? "";
            if (queryParams?.Count > 0)
            {
                string queryString = queryParams.Aggregate(new StringBuilder(), (aggregate, kvp) =>
                {
                    aggregate.Append(aggregate.Length == 0 ? "?" : "&")
                        .Append(Uri.EscapeUriString(kvp.Key));
                    if (kvp.Value != null)
                        aggregate.Append("=").Append(Uri.EscapeUriString(kvp.Value.ToString()));
                    return aggregate;
                }).ToString();
                relativeUrl += queryString;
            }
            if (!Uri.TryCreate(BaseUrl, relativeUrl, out Uri serviceUrl))
                throw new UriFormatException($"Could not create an absolute URL from base URL '{BaseUrl}' and relative URL '{relativeUrl}'.");
            return serviceUrl;
        }
    }

    public sealed partial class RateSheetClient
    {
        private readonly HttpClient _client;
        private readonly JsonSerializerSettings _serializerSettings;
        private Uri _baseUri = new Uri("http://rpos-dev.azurewebsites.net/", UriKind.Absolute);

        public RateSheetClient()
        {
            _client = new HttpClient();
            InitializeClient(_client);
            _serializerSettings = new JsonSerializerSettings();
            InitializeJsonSerializer(_serializerSettings);
        }

        partial void InitializeClient(HttpClient client);
        partial void InitializeJsonSerializer(JsonSerializerSettings settings);

        public Uri BaseUri
        {
            get => _baseUrl;
            set => _baseUrl = value ?? throw new ArgumentNullException(nameof(value));
        }

        public async Task<__models.RateSheetSearchResults> rateSheetSearchRateSheets(int startRecord = default(int), int recordCount = default(int))
        {
            string resourceUrl = "/api/rate-sheets";

            var queryParams = new Dictionary<string, object>
            {
                ["startRecord"] = startRecord,
                ["recordCount"] = recordCount,
            };

            Uri serviceUrl = BuildServiceUrl(resourceUrl, queryParams);

            using (var request = new HttpRequestMessage(HttpMethod.Get, serviceUrl))
            {
                request.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue("application/json"));

                HttpResponseMessage response = await _client.SendAsync(request).ConfigureAwait(false);

                int statusCode = (int)response.StatusCode;
                string responseContent = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                switch (statusCode)
                {
                    case 200:
                        var result200 = JsonConvert.DeserializeObject<__models.RateSheetSearchResults>(responseContent);
                        return result200;
                    case 500:
                        var result500 = JsonConvert.DeserializeObject<__models.Error>(responseContent);
                        throw new WebApiClientException<__models.Error>("A server side error occurred.", statusCode, result500);
                    default:
                        throw new WebApiClientException($"Unexpected status code was returned from {serviceUrl}", statusCode, responseContent);
                }
            }
        }

        private Uri BuildServiceUrl(string relativeUrl, IDictionary<string, object> queryParams = null)
        {
            relativeUrl = relativeUrl ?? "";
            if (queryParams?.Count > 0)
            {
                string queryString = queryParams.Aggregate(new StringBuilder(), (aggregate, kvp) =>
                {
                    aggregate.Append(aggregate.Length == 0 ? "?" : "&")
                        .Append(Uri.EscapeUriString(kvp.Key));
                    if (kvp.Value != null)
                        aggregate.Append("=").Append(Uri.EscapeUriString(kvp.Value.ToString()));
                    return aggregate;
                }).ToString();
                relativeUrl += queryString;
            }
            if (!Uri.TryCreate(BaseUrl, relativeUrl, out Uri serviceUrl))
                throw new UriFormatException($"Could not create an absolute URL from base URL '{BaseUrl}' and relative URL '{relativeUrl}'.");
            return serviceUrl;
        }
    }

    public sealed partial class UiRateSheetClient
    {
        private readonly HttpClient _client;
        private readonly JsonSerializerSettings _serializerSettings;
        private Uri _baseUri = new Uri("http://rpos-dev.azurewebsites.net/", UriKind.Absolute);

        public UiRateSheetClient()
        {
            _client = new HttpClient();
            InitializeClient(_client);
            _serializerSettings = new JsonSerializerSettings();
            InitializeJsonSerializer(_serializerSettings);
        }

        partial void InitializeClient(HttpClient client);
        partial void InitializeJsonSerializer(JsonSerializerSettings settings);

        public Uri BaseUri
        {
            get => _baseUrl;
            set => _baseUrl = value ?? throw new ArgumentNullException(nameof(value));
        }

        public async Task<__models.DailyRateSheet> uiRateSheetGetDailyRateSheet()
        {
            string resourceUrl = "/ui/rate-sheets/daily";

            Uri serviceUrl = BuildServiceUrl(resourceUrl);

            using (var request = new HttpRequestMessage(HttpMethod.Get, serviceUrl))
            {
                request.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue("application/json"));

                HttpResponseMessage response = await _client.SendAsync(request).ConfigureAwait(false);

                int statusCode = (int)response.StatusCode;
                string responseContent = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                switch (statusCode)
                {
                    case 200:
                        var result200 = JsonConvert.DeserializeObject<__models.DailyRateSheet>(responseContent);
                        return result200;
                    default:
                        throw new WebApiClientException($"Unexpected status code was returned from {serviceUrl}", statusCode, responseContent);
                }
            }
        }

        public async Task uiRateSheetGetArchiveRateSheets()
        {
            string resourceUrl = "/ui/rate-sheets/archive";

            Uri serviceUrl = BuildServiceUrl(resourceUrl);

            using (var request = new HttpRequestMessage(HttpMethod.Get, serviceUrl))
            {
                request.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue("application/json"));

                HttpResponseMessage response = await _client.SendAsync(request).ConfigureAwait(false);

                int statusCode = (int)response.StatusCode;
                string responseContent = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                switch (statusCode)
                {
                    case 200:
                        throw new WebApiClientException("A server side error occurred.", statusCode, responseContent);
                    default:
                        throw new WebApiClientException($"Unexpected status code was returned from {serviceUrl}", statusCode, responseContent);
                }
            }
        }

        private Uri BuildServiceUrl(string relativeUrl, IDictionary<string, object> queryParams = null)
        {
            relativeUrl = relativeUrl ?? "";
            if (queryParams?.Count > 0)
            {
                string queryString = queryParams.Aggregate(new StringBuilder(), (aggregate, kvp) =>
                {
                    aggregate.Append(aggregate.Length == 0 ? "?" : "&")
                        .Append(Uri.EscapeUriString(kvp.Key));
                    if (kvp.Value != null)
                        aggregate.Append("=").Append(Uri.EscapeUriString(kvp.Value.ToString()));
                    return aggregate;
                }).ToString();
                relativeUrl += queryString;
            }
            if (!Uri.TryCreate(BaseUrl, relativeUrl, out Uri serviceUrl))
                throw new UriFormatException($"Could not create an absolute URL from base URL '{BaseUrl}' and relative URL '{relativeUrl}'.");
            return serviceUrl;
        }
    }

    public class WebApiClientException : Exception
    {
        public WebApiClientException(string message, int statusCode, string response) : base(message)
        {
            StatusCode = statusCode;
            Response = response;
        }

        public int StatusCode { get; }

        public string Response { get; }
    }

    public sealed class WebApiClientException<TResult> : WebApiClientException
    {
        public WebApiClientException(string message, int statusCode, string response, TResult result) : base(message, statusCode, response)
        {
            Result = result;
        }

        public TResult Result { get; }
    }
}

namespace MyNamespace.Services
{
    [JsonObject(MemberSerialization.OptIn)]
    public sealed partial class Address
    {
        [JsonProperty("lines", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public IReadOnlyList<string> lines;

        [JsonProperty("city", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string city;

        [JsonProperty("state", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string state;

        [JsonProperty("zip", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string zip;

        [JsonProperty("id", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string id;

    }
    [JsonObject(MemberSerialization.OptIn)]
    public sealed partial class Asset
    {
        [JsonProperty("assetType", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public undefined assetType;

        [JsonProperty("borrowerId", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string borrowerId;

        [JsonProperty("companyName", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string companyName;

        [JsonProperty("addressLines", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public IReadOnlyList<string> addressLines;

        [JsonProperty("city", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string city;

        [JsonProperty("state", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string state;

        [JsonProperty("zipCode", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string zipCode;

        [JsonProperty("remarks", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string remarks;

        [JsonProperty("checkingSavings", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public IReadOnlyList<CheckingSavings> checkingSavings;

        [JsonProperty("stocksAndBonds", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public IReadOnlyList<StocksAndBonds> stocksAndBonds;

        [JsonProperty("autoOwned", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public IReadOnlyList<AutoOwned> autoOwned;

        [JsonProperty("lifeInsurance", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public LifeInsurance lifeInsurance;

        [JsonProperty("others", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public IReadOnlyList<Other> others;

        [JsonProperty("retirementFundsBalance", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public double retirementFundsBalance;

        [JsonProperty("netWorthBusinessBalance", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public double netWorthBusinessBalance;

        [JsonProperty("totalBalance", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public double totalBalance;

        [JsonProperty("recordStatus", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public undefined recordStatus;

        [JsonProperty("id", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string id;

    }
    [JsonObject(MemberSerialization.OptIn)]
    public sealed partial class AssetHeader
    {
        [JsonProperty("appDepositDesc", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string appDepositDesc;

        [JsonProperty("appDepositAmt", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public double appDepositAmt;

        [JsonProperty("earnestDesc", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string earnestDesc;

        [JsonProperty("earnestAmt", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public double earnestAmt;

        [JsonProperty("cashTowardsPurchaseIncludeInNetWorth", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public bool cashTowardsPurchaseIncludeInNetWorth;

        [JsonProperty("id", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string id;

    }
    [JsonObject(MemberSerialization.OptIn)]
    public sealed partial class AssetsLiabilities
    {
        [JsonProperty("applicationId", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string applicationId;

        [JsonProperty("statementCompleted", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public undefined statementCompleted;

        [JsonProperty("vacancyFactor", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public double vacancyFactor;

        [JsonProperty("subjectPropertyAddress", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public Address subjectPropertyAddress;

        [JsonProperty("borrowerAddress", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public BorrowerAddress borrowerAddress;

        [JsonProperty("coBorrowerAddress", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public BorrowerAddress coBorrowerAddress;

        [JsonProperty("assetHeader", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public AssetHeader assetHeader;

        [JsonProperty("assets", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public IReadOnlyList<Asset> assets;

        [JsonProperty("liabilities", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public IReadOnlyList<Liability> liabilities;

        [JsonProperty("realEstateOwnedList", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public IReadOnlyList<RealEstateOwned> realEstateOwnedList;

        [JsonProperty("id", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string id;

    }
    [JsonObject(MemberSerialization.OptIn)]
    public sealed partial class AssetsLiabilitiesRequest
    {
        [JsonProperty("applicationId", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string applicationId;

        [JsonProperty("borrowerId", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string borrowerId;

        [JsonProperty("coBorrowerId", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string coBorrowerId;

    }
    [JsonObject(MemberSerialization.OptIn)]
    public sealed partial class AutoOwned
    {
        [JsonProperty("autosOwned", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string autosOwned;

        [JsonProperty("balanceOrMarketValue", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public double balanceOrMarketValue;

        [JsonProperty("id", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string id;

    }
    [JsonObject(MemberSerialization.OptIn)]
    public sealed partial class BorrowerAddress
    {
        [JsonProperty("borrowerId", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string borrowerId;

        [JsonProperty("address", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public Address address;

        [JsonProperty("id", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string id;

    }
    [JsonObject(MemberSerialization.OptIn)]
    public sealed partial class Branch
    {
        [JsonProperty("name", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string name;

        [JsonProperty("id", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string id;

    }
    [JsonObject(MemberSerialization.OptIn)]
    public sealed partial class BranchFilterCriteria
    {
        [JsonProperty("field", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public undefined field;

        [JsonProperty("operation", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public undefined operation;

        [JsonProperty("value", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public object value;

    }
    [JsonObject(MemberSerialization.OptIn)]
    public sealed partial class BranchSearchCriteria
    {
        [JsonProperty("filters", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public IReadOnlyList<BranchFilterCriteria> filters;

        [JsonProperty("sortSpecs", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public IReadOnlyList<BranchSortSpec> sortSpecs;

        [JsonProperty("startRecord", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public int startRecord;

        [JsonProperty("recordCount", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public int recordCount;

    }
    [JsonObject(MemberSerialization.OptIn)]
    public sealed partial class BranchSearchResult
    {
        [JsonProperty("data", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public IReadOnlyList<Branch> data;

        [JsonProperty("totalCount", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public int totalCount;

    }
    [JsonObject(MemberSerialization.OptIn)]
    public sealed partial class BranchSortSpec
    {
        [JsonProperty("field", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public undefined field;

        [JsonProperty("order", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public undefined order;

    }
    [JsonObject(MemberSerialization.OptIn)]
    public sealed partial class CheckingSavings
    {
        [JsonProperty("accountType", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public undefined accountType;

        [JsonProperty("accountNumber", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string accountNumber;

        [JsonProperty("balanceOrMarketValue", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public double balanceOrMarketValue;

        [JsonProperty("recordStatus", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public undefined recordStatus;

        [JsonProperty("id", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string id;

    }
    [JsonObject(MemberSerialization.OptIn)]
    public sealed partial class DailyRateSheet
    {
        [JsonProperty("branches", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public BranchSearchResult branches;

        [JsonProperty("rateSheets", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public RateSheetSearchResults rateSheets;

    }
    [JsonObject(MemberSerialization.OptIn)]
    public sealed partial class Error
    {
        [JsonProperty("errorCode", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string errorCode;

        [JsonProperty("correlationId", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string correlationId;

        [JsonProperty("debug", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string debug;

    }
    [JsonObject(MemberSerialization.OptIn)]
    public sealed partial class Liability
    {
        [JsonProperty("liabilityType", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public undefined liabilityType;

        [JsonProperty("borrowerId", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string borrowerId;

        [JsonProperty("accountType", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public undefined accountType;

        [JsonProperty("companyName", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string companyName;

        [JsonProperty("addressLines", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public IReadOnlyList<string> addressLines;

        [JsonProperty("city", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string city;

        [JsonProperty("state", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string state;

        [JsonProperty("zipCode", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string zipCode;

        [JsonProperty("accountNumber", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string accountNumber;

        [JsonProperty("unpaidBalance", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public double unpaidBalance;

        [JsonProperty("notCounted", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public bool notCounted;

        [JsonProperty("toBePaidOff", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public bool toBePaidOff;

        [JsonProperty("omitted", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public bool omitted;

        [JsonProperty("listedOnCreditReport", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public bool listedOnCreditReport;

        [JsonProperty("resubordinated", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public bool resubordinated;

        [JsonProperty("defaultPaymentLeft", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public int defaultPaymentLeft;

        [JsonProperty("overrideDefault", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public bool overrideDefault;

        [JsonProperty("overridePaymentLeft", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string overridePaymentLeft;

        [JsonProperty("monthlyPayment", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public double monthlyPayment;

        [JsonProperty("atrNotes", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string atrNotes;

        [JsonProperty("otherNotes", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string otherNotes;

        [JsonProperty("isLinkedToReo", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public bool isLinkedToReo;

        [JsonProperty("reoId", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string reoId;

        [JsonProperty("lienPosition", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public int lienPosition;

        [JsonProperty("mortgagePayments", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public double mortgagePayments;

        [JsonProperty("otherExpenceType", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public undefined otherExpenceType;

        [JsonProperty("otherExpenseOwedTo", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string otherExpenseOwedTo;

        [JsonProperty("otherExpenseAmount", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public double otherExpenseAmount;

        [JsonProperty("otherExpenseQmatrNotes", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string otherExpenseQmatrNotes;

        [JsonProperty("jobExpenseDesc1", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string jobExpenseDesc1;

        [JsonProperty("jobExpenseAmount1", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public double jobExpenseAmount1;

        [JsonProperty("jobExpenseDesc2", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string jobExpenseDesc2;

        [JsonProperty("jobExpenseAmount2", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public double jobExpenseAmount2;

        [JsonProperty("jobExpense1QmatrNotes", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string jobExpense1QmatrNotes;

        [JsonProperty("jobExpense2QmatrNotes", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string jobExpense2QmatrNotes;

        [JsonProperty("recordStatus", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public undefined recordStatus;

        [JsonProperty("id", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string id;

    }
    [JsonObject(MemberSerialization.OptIn)]
    public sealed partial class LifeInsurance
    {
        [JsonProperty("faceAmountName", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public double faceAmountName;

        [JsonProperty("balanceOrMarketValue", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public double balanceOrMarketValue;

        [JsonProperty("id", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string id;

    }
    [JsonObject(MemberSerialization.OptIn)]
    public sealed partial class Other
    {
        [JsonProperty("assetName", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string assetName;

        [JsonProperty("balanceOrMarketValue", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public double balanceOrMarketValue;

        [JsonProperty("id", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string id;

    }
    [JsonObject(MemberSerialization.OptIn)]
    public sealed partial class RateSheet
    {
        [JsonProperty("name", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string name;

        [JsonProperty("fileType", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string fileType;

        [JsonProperty("branchId", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string branchId;

        [JsonProperty("fromDate", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public DateTime fromDate;

        [JsonProperty("toDate", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public DateTime toDate;

        [JsonProperty("id", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string id;

    }
    [JsonObject(MemberSerialization.OptIn)]
    public sealed partial class RateSheetFilterCriteria
    {
        [JsonProperty("field", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public undefined field;

        [JsonProperty("operation", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public undefined operation;

        [JsonProperty("value", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public object value;

    }
    [JsonObject(MemberSerialization.OptIn)]
    public sealed partial class RateSheetSearchCriteria
    {
        [JsonProperty("filters", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public IReadOnlyList<RateSheetFilterCriteria> filters;

        [JsonProperty("sortSpecs", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public IReadOnlyList<RateSheetSortSpec> sortSpecs;

        [JsonProperty("startRecord", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public int startRecord;

        [JsonProperty("recordCount", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public int recordCount;

    }
    [JsonObject(MemberSerialization.OptIn)]
    public sealed partial class RateSheetSearchResults
    {
        [JsonProperty("data", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public IReadOnlyList<RateSheet> data;

        [JsonProperty("totalCount", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public int totalCount;

    }
    [JsonObject(MemberSerialization.OptIn)]
    public sealed partial class RateSheetSortSpec
    {
        [JsonProperty("field", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public undefined field;

        [JsonProperty("order", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public undefined order;

    }
    [JsonObject(MemberSerialization.OptIn)]
    public sealed partial class RealEstateOwned
    {
        [JsonProperty("borrowerId", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string borrowerId;

        [JsonProperty("isCurrentResidence", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public bool isCurrentResidence;

        [JsonProperty("isSubjectProperty", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public bool isSubjectProperty;

        [JsonProperty("propertyAddresses", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public IReadOnlyList<string> propertyAddresses;

        [JsonProperty("city", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string city;

        [JsonProperty("state", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string state;

        [JsonProperty("zipCode", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string zipCode;

        [JsonProperty("propertyStatus", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public undefined propertyStatus;

        [JsonProperty("typeOfProperty", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public undefined typeOfProperty;

        [JsonProperty("presentMarketValue", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public double presentMarketValue;

        [JsonProperty("amountOfMortgages", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public double amountOfMortgages;

        [JsonProperty("grossRentalIncome", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public double grossRentalIncome;

        [JsonProperty("vacancyFactor", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public double vacancyFactor;

        [JsonProperty("overrideVacancyFactor", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public bool overrideVacancyFactor;

        [JsonProperty("overrideVacancyFactorValue", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public double overrideVacancyFactorValue;

        [JsonProperty("incomeLessVacancy", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public double incomeLessVacancy;

        [JsonProperty("mortgagePayments", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public double mortgagePayments;

        [JsonProperty("includeTandI", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public bool includeTandI;

        [JsonProperty("insMainTaxHoa", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public double insMainTaxHoa;

        [JsonProperty("netRentalIncome", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public double netRentalIncome;

        [JsonProperty("overrideDefaultNri", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public bool overrideDefaultNri;

        [JsonProperty("overrideNriValue", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public double overrideNriValue;

        [JsonProperty("piti", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public double piti;

        [JsonProperty("overrideDefaultPiti", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public bool overrideDefaultPiti;

        [JsonProperty("overridePitiValue", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public double overridePitiValue;

        [JsonProperty("linkedToLiability", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public bool linkedToLiability;

        [JsonProperty("linkedLiabilities", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public IReadOnlyList<Liability> linkedLiabilities;

        [JsonProperty("totalReoValue", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public double totalReoValue;

        [JsonProperty("recordStatus", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public undefined recordStatus;

        [JsonProperty("id", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string id;

    }
    [JsonObject(MemberSerialization.OptIn)]
    public sealed partial class StocksAndBonds
    {
        [JsonProperty("bankName", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string bankName;

        [JsonProperty("balanceOrMarketValue", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public double balanceOrMarketValue;

        [JsonProperty("id", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string id;

    }

    public enum AccountTypeCheckingSavings
    {
        NotAssigned,
        Savings,
        Checkings,
        CashDepositOnSaleContract,
        GiftNotDeposited,
        CertificateOfDeposit,
        MoneyMarketFund,
        MutualFunds,
        Stocks,
        Bonds,
        SecuredBorrowedFundsNotDeposited,
        BridgeLoanNotDeposited,
        RetairementFunds,
        NetWorthOfBusinessOwned,
        TrustFunds,
        OtherNonLiquidAsset,
        OtherLiquidAsset,
        NetProceedsFromSaleOfRealEstate,
        NetEquity,
        CashOnHand,
        GiftOfEquity,
    }
    public enum AccountTypeLiability
    {
        NotAssigned,
        Revolving,
        Installment,
        Mortgage,
        Heloc,
        Liens,
        LeasePayments,
        Open,
        Taxes,
        Other,
    }
    public enum AssetTypeAsset
    {
        NotAssigned,
        CheckingAndSaving,
        StocksAndBonds,
        AutoOwned,
        OtherAssets,
        LifeInsurance,
        RetirementFunds,
        NetWorthBusiness,
    }
    public enum FieldBranchFilterCriteria
    {
        Name,
    }
    public enum FieldRateSheetFilterCriteria
    {
        Name,
        FileType,
        BranchId,
        FromDate,
        ToDate,
    }
    public enum LiabilityTypeLiability
    {
        NotAssigned,
        Banking,
        Other,
    }
    public enum OperationBranchFilterCriteria
    {
        Equals,
        DoesNotEqual,
        GreaterThan,
        GreaterThanOrEqual,
        LessThan,
        LessThanOrEqual,
        Like,
    }
    public enum OrderBranchSortSpec
    {
        Ascending,
        Descending,
    }
    public enum OtherExpenceTypeLiability
    {
        NotAssigned,
        Alimony,
        ChildSupport,
        SeperateMaintance,
        OtherExpense,
    }
    public enum PropertyStatusRealEstateOwned
    {
        NotAssigned,
        Sold,
        PendingSale,
        Rental,
        Retained,
    }
    public enum RecordStatusAsset
    {
        NotAssigned,
        New,
        Update,
        Delete,
    }
    public enum StatementCompletedAssetsLiabilities
    {
        NotAssigned,
        Jointly,
        NotJointly,
    }
    public enum TypeOfPropertyRealEstateOwned
    {
        NotAssigned,
        SingleFamily,
        Condominium,
        TownHouse,
        CoOperative,
        TwoToFourUnitProperty,
        MultiFamilyMoreThanFourUnits,
        ManufacturedMobileHome,
        CommercialNonResidential,
        MixedUseResidential,
        Farm,
        HomeAndBusinessCombined,
        Land,
    }
}