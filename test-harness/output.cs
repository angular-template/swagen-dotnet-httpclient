// ------------------------------
// <auto-generated>
//     Generated using the Swagen tool
//     Generator: dotnet-httpclient
//     Mode: csharp
// </auto-generated>
// ------------------------------
// Swagger Petstore
// This is a sample server Petstore server.  You can find out more about Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).  For this sample, you can use the api key `special-key` to test the authorization filters.
// Base URL: https://petstore.swagger.io/v2/

using System;
using System.Collections.Generic;
using System.Linq;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text;
using System.Threading.Tasks;

using Newtonsoft.Json;
using Newtonsoft.Json.Serialization;

using __models = MyNamespace.Services;

namespace MyNamespace.Services
{

    public sealed partial class pet
    {
        private readonly HttpClient _client;
        private readonly JsonSerializerSettings _serializerSettings;
        private Uri _baseUrl = new Uri("https://petstore.swagger.io/v2/", UriKind.Absolute);

        public pet()
        {
            _client = new HttpClient();
            __GlobalInitializer.InitializeClient(_client);
            __InitializeClient(_client);
            _serializerSettings = new JsonSerializerSettings();
            __GlobalInitializer.InitializeJsonSerializer(_serializerSettings);
            __InitializeJsonSerializer(_serializerSettings);
        }

        partial void __InitializeClient(HttpClient client);
        partial void __InitializeJsonSerializer(JsonSerializerSettings settings);

        public Uri BaseUrl
        {
            get => _baseUrl;
            set => _baseUrl = value ?? throw new ArgumentNullException(nameof(value));
        }

        public async Task addPet(__models.Pet body)
        {
            if (body == null)
                throw new ArgumentNullException(nameof(body));

            string _resourceUrl = "/pet";

            Uri _serviceUrl = BuildServiceUrl(_resourceUrl);

            using (var _request = new HttpRequestMessage(HttpMethod.Post, _serviceUrl))
            {
                var _content = new StringContent(JsonConvert.SerializeObject(body, _serializerSettings));
                _content.Headers.ContentType.MediaType = "application/json";
                _request.Content = _content;
                _request.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue("application/json"));

                HttpResponseMessage _response = await _client.SendAsync(_request).ConfigureAwait(false);

                int _statusCode = (int)_response.StatusCode;
                string _responseContent = await _response.Content.ReadAsStringAsync().ConfigureAwait(false);
                switch (_statusCode)
                {
                    case 405:
                        throw new WebApiClientException("A server side error occurred.", _statusCode, _responseContent);
                    default:
                        throw new WebApiClientException($"Unexpected status code {_statusCode} was returned from {_serviceUrl}", _statusCode, _responseContent);
                }
            }
        }

        public async Task updatePet(__models.Pet body)
        {
            if (body == null)
                throw new ArgumentNullException(nameof(body));

            string _resourceUrl = "/pet";

            Uri _serviceUrl = BuildServiceUrl(_resourceUrl);

            using (var _request = new HttpRequestMessage(HttpMethod.Put, _serviceUrl))
            {
                var _content = new StringContent(JsonConvert.SerializeObject(body, _serializerSettings));
                _content.Headers.ContentType.MediaType = "application/json";
                _request.Content = _content;
                _request.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue("application/json"));

                HttpResponseMessage _response = await _client.SendAsync(_request).ConfigureAwait(false);

                int _statusCode = (int)_response.StatusCode;
                string _responseContent = await _response.Content.ReadAsStringAsync().ConfigureAwait(false);
                switch (_statusCode)
                {
                    case 400:
                        throw new WebApiClientException("A server side error occurred.", _statusCode, _responseContent);
                    case 404:
                        throw new WebApiClientException("A server side error occurred.", _statusCode, _responseContent);
                    case 405:
                        throw new WebApiClientException("A server side error occurred.", _statusCode, _responseContent);
                    default:
                        throw new WebApiClientException($"Unexpected status code {_statusCode} was returned from {_serviceUrl}", _statusCode, _responseContent);
                }
            }
        }

        public async Task<IReadOnlyList<__models.Pet>> findPetsByStatus(IReadOnlyList<__models.undefined> status)
        {
            if (status == null)
                throw new ArgumentNullException(nameof(status));

            string _resourceUrl = "/pet/findByStatus";

            var _queryParams = new Dictionary<string, object>
            {
                ["status"] = status,
            };

            Uri _serviceUrl = BuildServiceUrl(_resourceUrl, _queryParams);

            using (var _request = new HttpRequestMessage(HttpMethod.Get, _serviceUrl))
            {
                _request.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue("application/json"));

                HttpResponseMessage _response = await _client.SendAsync(_request).ConfigureAwait(false);

                int _statusCode = (int)_response.StatusCode;
                string _responseContent = await _response.Content.ReadAsStringAsync().ConfigureAwait(false);
                switch (_statusCode)
                {
                    case 200:
                        var _result200 = JsonConvert.DeserializeObject<IReadOnlyList<__models.Pet>>(_responseContent);
                        return _result200;
                    case 400:
                        throw new WebApiClientException("A server side error occurred.", _statusCode, _responseContent);
                    default:
                        throw new WebApiClientException($"Unexpected status code {_statusCode} was returned from {_serviceUrl}", _statusCode, _responseContent);
                }
            }
        }

        public async Task<IReadOnlyList<__models.Pet>> findPetsByTags(IReadOnlyList<string> tags)
        {
            if (tags == null)
                throw new ArgumentNullException(nameof(tags));

            string _resourceUrl = "/pet/findByTags";

            var _queryParams = new Dictionary<string, object>
            {
                ["tags"] = tags,
            };

            Uri _serviceUrl = BuildServiceUrl(_resourceUrl, _queryParams);

            using (var _request = new HttpRequestMessage(HttpMethod.Get, _serviceUrl))
            {
                _request.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue("application/json"));

                HttpResponseMessage _response = await _client.SendAsync(_request).ConfigureAwait(false);

                int _statusCode = (int)_response.StatusCode;
                string _responseContent = await _response.Content.ReadAsStringAsync().ConfigureAwait(false);
                switch (_statusCode)
                {
                    case 200:
                        var _result200 = JsonConvert.DeserializeObject<IReadOnlyList<__models.Pet>>(_responseContent);
                        return _result200;
                    case 400:
                        throw new WebApiClientException("A server side error occurred.", _statusCode, _responseContent);
                    default:
                        throw new WebApiClientException($"Unexpected status code {_statusCode} was returned from {_serviceUrl}", _statusCode, _responseContent);
                }
            }
        }

        public async Task<__models.Pet> getPetById(long petId)
        {
            if (petId == null)
                throw new ArgumentNullException(nameof(petId));

            string _resourceUrl = "/pet/{petId}"
                .Replace("{petId}", Uri.EscapeUriString(petId?.ToString()));

            Uri _serviceUrl = BuildServiceUrl(_resourceUrl);

            using (var _request = new HttpRequestMessage(HttpMethod.Get, _serviceUrl))
            {
                _request.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue("application/json"));

                HttpResponseMessage _response = await _client.SendAsync(_request).ConfigureAwait(false);

                int _statusCode = (int)_response.StatusCode;
                string _responseContent = await _response.Content.ReadAsStringAsync().ConfigureAwait(false);
                switch (_statusCode)
                {
                    case 200:
                        var _result200 = JsonConvert.DeserializeObject<__models.Pet>(_responseContent);
                        return _result200;
                    case 400:
                        throw new WebApiClientException("A server side error occurred.", _statusCode, _responseContent);
                    case 404:
                        throw new WebApiClientException("A server side error occurred.", _statusCode, _responseContent);
                    default:
                        throw new WebApiClientException($"Unexpected status code {_statusCode} was returned from {_serviceUrl}", _statusCode, _responseContent);
                }
            }
        }

        public async Task updatePetWithForm(long petId, string name = default(string), string status = default(string))
        {
            if (petId == null)
                throw new ArgumentNullException(nameof(petId));

            string _resourceUrl = "/pet/{petId}"
                .Replace("{petId}", Uri.EscapeUriString(petId?.ToString()));

            Uri _serviceUrl = BuildServiceUrl(_resourceUrl);

            using (var _request = new HttpRequestMessage(HttpMethod.Post, _serviceUrl))
            {
                _request.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue("application/json"));

                HttpResponseMessage _response = await _client.SendAsync(_request).ConfigureAwait(false);

                int _statusCode = (int)_response.StatusCode;
                string _responseContent = await _response.Content.ReadAsStringAsync().ConfigureAwait(false);
                switch (_statusCode)
                {
                    case 405:
                        throw new WebApiClientException("A server side error occurred.", _statusCode, _responseContent);
                    default:
                        throw new WebApiClientException($"Unexpected status code {_statusCode} was returned from {_serviceUrl}", _statusCode, _responseContent);
                }
            }
        }

        public async Task deletePet(long petId, string api_key = default(string))
        {
            if (petId == null)
                throw new ArgumentNullException(nameof(petId));

            string _resourceUrl = "/pet/{petId}"
                .Replace("{petId}", Uri.EscapeUriString(petId?.ToString()));

            Uri _serviceUrl = BuildServiceUrl(_resourceUrl);

            using (var _request = new HttpRequestMessage(HttpMethod.Delete, _serviceUrl))
            {
                _request.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue("application/json"));

                HttpResponseMessage _response = await _client.SendAsync(_request).ConfigureAwait(false);

                int _statusCode = (int)_response.StatusCode;
                string _responseContent = await _response.Content.ReadAsStringAsync().ConfigureAwait(false);
                switch (_statusCode)
                {
                    case 400:
                        throw new WebApiClientException("A server side error occurred.", _statusCode, _responseContent);
                    case 404:
                        throw new WebApiClientException("A server side error occurred.", _statusCode, _responseContent);
                    default:
                        throw new WebApiClientException($"Unexpected status code {_statusCode} was returned from {_serviceUrl}", _statusCode, _responseContent);
                }
            }
        }

        public async Task<__models.ApiResponse> uploadFile(long petId, string additionalMetadata = default(string), object file = default(object))
        {
            if (petId == null)
                throw new ArgumentNullException(nameof(petId));

            string _resourceUrl = "/pet/{petId}/uploadImage"
                .Replace("{petId}", Uri.EscapeUriString(petId?.ToString()));

            Uri _serviceUrl = BuildServiceUrl(_resourceUrl);

            using (var _request = new HttpRequestMessage(HttpMethod.Post, _serviceUrl))
            {
                _request.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue("application/json"));

                HttpResponseMessage _response = await _client.SendAsync(_request).ConfigureAwait(false);

                int _statusCode = (int)_response.StatusCode;
                string _responseContent = await _response.Content.ReadAsStringAsync().ConfigureAwait(false);
                switch (_statusCode)
                {
                    case 200:
                        var _result200 = JsonConvert.DeserializeObject<__models.ApiResponse>(_responseContent);
                        return _result200;
                    default:
                        throw new WebApiClientException($"Unexpected status code {_statusCode} was returned from {_serviceUrl}", _statusCode, _responseContent);
                }
            }
        }

        private Uri BuildServiceUrl(string relativeUrl, IDictionary<string, object> queryParams = null)
        {
            relativeUrl = relativeUrl ?? "";
            if (queryParams?.Count > 0)
            {
                string queryString = queryParams.Aggregate(new StringBuilder(), (aggregate, kvp) =>
                {
                    aggregate.Append(aggregate.Length == 0 ? "?" : "&")
                        .Append(Uri.EscapeUriString(kvp.Key));
                    if (kvp.Value != null)
                        aggregate.Append("=").Append(Uri.EscapeUriString(kvp.Value.ToString()));
                    return aggregate;
                }).ToString();
                relativeUrl += queryString;
            }
            if (!Uri.TryCreate(BaseUrl, relativeUrl, out Uri serviceUrl))
                throw new UriFormatException($"Could not create an absolute URL from base URL '{BaseUrl}' and relative URL '{relativeUrl}'.");
            return serviceUrl;
        }
    }

    public sealed partial class store
    {
        private readonly HttpClient _client;
        private readonly JsonSerializerSettings _serializerSettings;
        private Uri _baseUrl = new Uri("https://petstore.swagger.io/v2/", UriKind.Absolute);

        public store()
        {
            _client = new HttpClient();
            __GlobalInitializer.InitializeClient(_client);
            __InitializeClient(_client);
            _serializerSettings = new JsonSerializerSettings();
            __GlobalInitializer.InitializeJsonSerializer(_serializerSettings);
            __InitializeJsonSerializer(_serializerSettings);
        }

        partial void __InitializeClient(HttpClient client);
        partial void __InitializeJsonSerializer(JsonSerializerSettings settings);

        public Uri BaseUrl
        {
            get => _baseUrl;
            set => _baseUrl = value ?? throw new ArgumentNullException(nameof(value));
        }

        public async Task<object> getInventory()
        {
            string _resourceUrl = "/store/inventory";

            Uri _serviceUrl = BuildServiceUrl(_resourceUrl);

            using (var _request = new HttpRequestMessage(HttpMethod.Get, _serviceUrl))
            {
                _request.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue("application/json"));

                HttpResponseMessage _response = await _client.SendAsync(_request).ConfigureAwait(false);

                int _statusCode = (int)_response.StatusCode;
                string _responseContent = await _response.Content.ReadAsStringAsync().ConfigureAwait(false);
                switch (_statusCode)
                {
                    case 200:
                        var _result200 = JsonConvert.DeserializeObject<object>(_responseContent);
                        return _result200;
                    default:
                        throw new WebApiClientException($"Unexpected status code {_statusCode} was returned from {_serviceUrl}", _statusCode, _responseContent);
                }
            }
        }

        public async Task<__models.Order> placeOrder(__models.Order body)
        {
            if (body == null)
                throw new ArgumentNullException(nameof(body));

            string _resourceUrl = "/store/order";

            Uri _serviceUrl = BuildServiceUrl(_resourceUrl);

            using (var _request = new HttpRequestMessage(HttpMethod.Post, _serviceUrl))
            {
                var _content = new StringContent(JsonConvert.SerializeObject(body, _serializerSettings));
                _content.Headers.ContentType.MediaType = "application/json";
                _request.Content = _content;
                _request.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue("application/json"));

                HttpResponseMessage _response = await _client.SendAsync(_request).ConfigureAwait(false);

                int _statusCode = (int)_response.StatusCode;
                string _responseContent = await _response.Content.ReadAsStringAsync().ConfigureAwait(false);
                switch (_statusCode)
                {
                    case 200:
                        var _result200 = JsonConvert.DeserializeObject<__models.Order>(_responseContent);
                        return _result200;
                    case 400:
                        throw new WebApiClientException("A server side error occurred.", _statusCode, _responseContent);
                    default:
                        throw new WebApiClientException($"Unexpected status code {_statusCode} was returned from {_serviceUrl}", _statusCode, _responseContent);
                }
            }
        }

        public async Task<__models.Order> getOrderById(long orderId)
        {
            if (orderId == null)
                throw new ArgumentNullException(nameof(orderId));

            string _resourceUrl = "/store/order/{orderId}"
                .Replace("{orderId}", Uri.EscapeUriString(orderId?.ToString()));

            Uri _serviceUrl = BuildServiceUrl(_resourceUrl);

            using (var _request = new HttpRequestMessage(HttpMethod.Get, _serviceUrl))
            {
                _request.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue("application/json"));

                HttpResponseMessage _response = await _client.SendAsync(_request).ConfigureAwait(false);

                int _statusCode = (int)_response.StatusCode;
                string _responseContent = await _response.Content.ReadAsStringAsync().ConfigureAwait(false);
                switch (_statusCode)
                {
                    case 200:
                        var _result200 = JsonConvert.DeserializeObject<__models.Order>(_responseContent);
                        return _result200;
                    case 400:
                        throw new WebApiClientException("A server side error occurred.", _statusCode, _responseContent);
                    case 404:
                        throw new WebApiClientException("A server side error occurred.", _statusCode, _responseContent);
                    default:
                        throw new WebApiClientException($"Unexpected status code {_statusCode} was returned from {_serviceUrl}", _statusCode, _responseContent);
                }
            }
        }

        public async Task deleteOrder(long orderId)
        {
            if (orderId == null)
                throw new ArgumentNullException(nameof(orderId));

            string _resourceUrl = "/store/order/{orderId}"
                .Replace("{orderId}", Uri.EscapeUriString(orderId?.ToString()));

            Uri _serviceUrl = BuildServiceUrl(_resourceUrl);

            using (var _request = new HttpRequestMessage(HttpMethod.Delete, _serviceUrl))
            {
                _request.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue("application/json"));

                HttpResponseMessage _response = await _client.SendAsync(_request).ConfigureAwait(false);

                int _statusCode = (int)_response.StatusCode;
                string _responseContent = await _response.Content.ReadAsStringAsync().ConfigureAwait(false);
                switch (_statusCode)
                {
                    case 400:
                        throw new WebApiClientException("A server side error occurred.", _statusCode, _responseContent);
                    case 404:
                        throw new WebApiClientException("A server side error occurred.", _statusCode, _responseContent);
                    default:
                        throw new WebApiClientException($"Unexpected status code {_statusCode} was returned from {_serviceUrl}", _statusCode, _responseContent);
                }
            }
        }

        private Uri BuildServiceUrl(string relativeUrl, IDictionary<string, object> queryParams = null)
        {
            relativeUrl = relativeUrl ?? "";
            if (queryParams?.Count > 0)
            {
                string queryString = queryParams.Aggregate(new StringBuilder(), (aggregate, kvp) =>
                {
                    aggregate.Append(aggregate.Length == 0 ? "?" : "&")
                        .Append(Uri.EscapeUriString(kvp.Key));
                    if (kvp.Value != null)
                        aggregate.Append("=").Append(Uri.EscapeUriString(kvp.Value.ToString()));
                    return aggregate;
                }).ToString();
                relativeUrl += queryString;
            }
            if (!Uri.TryCreate(BaseUrl, relativeUrl, out Uri serviceUrl))
                throw new UriFormatException($"Could not create an absolute URL from base URL '{BaseUrl}' and relative URL '{relativeUrl}'.");
            return serviceUrl;
        }
    }

    public sealed partial class user
    {
        private readonly HttpClient _client;
        private readonly JsonSerializerSettings _serializerSettings;
        private Uri _baseUrl = new Uri("https://petstore.swagger.io/v2/", UriKind.Absolute);

        public user()
        {
            _client = new HttpClient();
            __GlobalInitializer.InitializeClient(_client);
            __InitializeClient(_client);
            _serializerSettings = new JsonSerializerSettings();
            __GlobalInitializer.InitializeJsonSerializer(_serializerSettings);
            __InitializeJsonSerializer(_serializerSettings);
        }

        partial void __InitializeClient(HttpClient client);
        partial void __InitializeJsonSerializer(JsonSerializerSettings settings);

        public Uri BaseUrl
        {
            get => _baseUrl;
            set => _baseUrl = value ?? throw new ArgumentNullException(nameof(value));
        }

        public async Task createUser(__models.User body)
        {
            if (body == null)
                throw new ArgumentNullException(nameof(body));

            string _resourceUrl = "/user";

            Uri _serviceUrl = BuildServiceUrl(_resourceUrl);

            using (var _request = new HttpRequestMessage(HttpMethod.Post, _serviceUrl))
            {
                var _content = new StringContent(JsonConvert.SerializeObject(body, _serializerSettings));
                _content.Headers.ContentType.MediaType = "application/json";
                _request.Content = _content;
                _request.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue("application/json"));

                HttpResponseMessage _response = await _client.SendAsync(_request).ConfigureAwait(false);

                int _statusCode = (int)_response.StatusCode;
                string _responseContent = await _response.Content.ReadAsStringAsync().ConfigureAwait(false);
                switch (_statusCode)
                {
                    case default:
                        throw new WebApiClientException("A server side error occurred.", _statusCode, _responseContent);
                    default:
                        throw new WebApiClientException($"Unexpected status code {_statusCode} was returned from {_serviceUrl}", _statusCode, _responseContent);
                }
            }
        }

        public async Task createUsersWithArrayInput(IReadOnlyList<__models.User> body)
        {
            if (body == null)
                throw new ArgumentNullException(nameof(body));

            string _resourceUrl = "/user/createWithArray";

            Uri _serviceUrl = BuildServiceUrl(_resourceUrl);

            using (var _request = new HttpRequestMessage(HttpMethod.Post, _serviceUrl))
            {
                var _content = new StringContent(JsonConvert.SerializeObject(body, _serializerSettings));
                _content.Headers.ContentType.MediaType = "application/json";
                _request.Content = _content;
                _request.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue("application/json"));

                HttpResponseMessage _response = await _client.SendAsync(_request).ConfigureAwait(false);

                int _statusCode = (int)_response.StatusCode;
                string _responseContent = await _response.Content.ReadAsStringAsync().ConfigureAwait(false);
                switch (_statusCode)
                {
                    case default:
                        throw new WebApiClientException("A server side error occurred.", _statusCode, _responseContent);
                    default:
                        throw new WebApiClientException($"Unexpected status code {_statusCode} was returned from {_serviceUrl}", _statusCode, _responseContent);
                }
            }
        }

        public async Task createUsersWithListInput(IReadOnlyList<__models.User> body)
        {
            if (body == null)
                throw new ArgumentNullException(nameof(body));

            string _resourceUrl = "/user/createWithList";

            Uri _serviceUrl = BuildServiceUrl(_resourceUrl);

            using (var _request = new HttpRequestMessage(HttpMethod.Post, _serviceUrl))
            {
                var _content = new StringContent(JsonConvert.SerializeObject(body, _serializerSettings));
                _content.Headers.ContentType.MediaType = "application/json";
                _request.Content = _content;
                _request.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue("application/json"));

                HttpResponseMessage _response = await _client.SendAsync(_request).ConfigureAwait(false);

                int _statusCode = (int)_response.StatusCode;
                string _responseContent = await _response.Content.ReadAsStringAsync().ConfigureAwait(false);
                switch (_statusCode)
                {
                    case default:
                        throw new WebApiClientException("A server side error occurred.", _statusCode, _responseContent);
                    default:
                        throw new WebApiClientException($"Unexpected status code {_statusCode} was returned from {_serviceUrl}", _statusCode, _responseContent);
                }
            }
        }

        public async Task<string> loginUser(string username, string password)
        {
            if (username == null)
                throw new ArgumentNullException(nameof(username));
            if (password == null)
                throw new ArgumentNullException(nameof(password));

            string _resourceUrl = "/user/login";

            var _queryParams = new Dictionary<string, object>
            {
                ["username"] = username,
                ["password"] = password,
            };

            Uri _serviceUrl = BuildServiceUrl(_resourceUrl, _queryParams);

            using (var _request = new HttpRequestMessage(HttpMethod.Get, _serviceUrl))
            {
                _request.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue("application/json"));

                HttpResponseMessage _response = await _client.SendAsync(_request).ConfigureAwait(false);

                int _statusCode = (int)_response.StatusCode;
                string _responseContent = await _response.Content.ReadAsStringAsync().ConfigureAwait(false);
                switch (_statusCode)
                {
                    case 200:
                        var _result200 = JsonConvert.DeserializeObject<string>(_responseContent);
                        return _result200;
                    case 400:
                        throw new WebApiClientException("A server side error occurred.", _statusCode, _responseContent);
                    default:
                        throw new WebApiClientException($"Unexpected status code {_statusCode} was returned from {_serviceUrl}", _statusCode, _responseContent);
                }
            }
        }

        public async Task logoutUser()
        {
            string _resourceUrl = "/user/logout";

            Uri _serviceUrl = BuildServiceUrl(_resourceUrl);

            using (var _request = new HttpRequestMessage(HttpMethod.Get, _serviceUrl))
            {
                _request.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue("application/json"));

                HttpResponseMessage _response = await _client.SendAsync(_request).ConfigureAwait(false);

                int _statusCode = (int)_response.StatusCode;
                string _responseContent = await _response.Content.ReadAsStringAsync().ConfigureAwait(false);
                switch (_statusCode)
                {
                    case default:
                        throw new WebApiClientException("A server side error occurred.", _statusCode, _responseContent);
                    default:
                        throw new WebApiClientException($"Unexpected status code {_statusCode} was returned from {_serviceUrl}", _statusCode, _responseContent);
                }
            }
        }

        public async Task<__models.User> getUserByName(string username)
        {
            if (username == null)
                throw new ArgumentNullException(nameof(username));

            string _resourceUrl = "/user/{username}"
                .Replace("{username}", Uri.EscapeUriString(username?.ToString()));

            Uri _serviceUrl = BuildServiceUrl(_resourceUrl);

            using (var _request = new HttpRequestMessage(HttpMethod.Get, _serviceUrl))
            {
                _request.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue("application/json"));

                HttpResponseMessage _response = await _client.SendAsync(_request).ConfigureAwait(false);

                int _statusCode = (int)_response.StatusCode;
                string _responseContent = await _response.Content.ReadAsStringAsync().ConfigureAwait(false);
                switch (_statusCode)
                {
                    case 200:
                        var _result200 = JsonConvert.DeserializeObject<__models.User>(_responseContent);
                        return _result200;
                    case 400:
                        throw new WebApiClientException("A server side error occurred.", _statusCode, _responseContent);
                    case 404:
                        throw new WebApiClientException("A server side error occurred.", _statusCode, _responseContent);
                    default:
                        throw new WebApiClientException($"Unexpected status code {_statusCode} was returned from {_serviceUrl}", _statusCode, _responseContent);
                }
            }
        }

        public async Task updateUser(string username, __models.User body)
        {
            if (username == null)
                throw new ArgumentNullException(nameof(username));
            if (body == null)
                throw new ArgumentNullException(nameof(body));

            string _resourceUrl = "/user/{username}"
                .Replace("{username}", Uri.EscapeUriString(username?.ToString()));

            Uri _serviceUrl = BuildServiceUrl(_resourceUrl);

            using (var _request = new HttpRequestMessage(HttpMethod.Put, _serviceUrl))
            {
                var _content = new StringContent(JsonConvert.SerializeObject(body, _serializerSettings));
                _content.Headers.ContentType.MediaType = "application/json";
                _request.Content = _content;
                _request.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue("application/json"));

                HttpResponseMessage _response = await _client.SendAsync(_request).ConfigureAwait(false);

                int _statusCode = (int)_response.StatusCode;
                string _responseContent = await _response.Content.ReadAsStringAsync().ConfigureAwait(false);
                switch (_statusCode)
                {
                    case 400:
                        throw new WebApiClientException("A server side error occurred.", _statusCode, _responseContent);
                    case 404:
                        throw new WebApiClientException("A server side error occurred.", _statusCode, _responseContent);
                    default:
                        throw new WebApiClientException($"Unexpected status code {_statusCode} was returned from {_serviceUrl}", _statusCode, _responseContent);
                }
            }
        }

        public async Task deleteUser(string username)
        {
            if (username == null)
                throw new ArgumentNullException(nameof(username));

            string _resourceUrl = "/user/{username}"
                .Replace("{username}", Uri.EscapeUriString(username?.ToString()));

            Uri _serviceUrl = BuildServiceUrl(_resourceUrl);

            using (var _request = new HttpRequestMessage(HttpMethod.Delete, _serviceUrl))
            {
                _request.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue("application/json"));

                HttpResponseMessage _response = await _client.SendAsync(_request).ConfigureAwait(false);

                int _statusCode = (int)_response.StatusCode;
                string _responseContent = await _response.Content.ReadAsStringAsync().ConfigureAwait(false);
                switch (_statusCode)
                {
                    case 400:
                        throw new WebApiClientException("A server side error occurred.", _statusCode, _responseContent);
                    case 404:
                        throw new WebApiClientException("A server side error occurred.", _statusCode, _responseContent);
                    default:
                        throw new WebApiClientException($"Unexpected status code {_statusCode} was returned from {_serviceUrl}", _statusCode, _responseContent);
                }
            }
        }

        private Uri BuildServiceUrl(string relativeUrl, IDictionary<string, object> queryParams = null)
        {
            relativeUrl = relativeUrl ?? "";
            if (queryParams?.Count > 0)
            {
                string queryString = queryParams.Aggregate(new StringBuilder(), (aggregate, kvp) =>
                {
                    aggregate.Append(aggregate.Length == 0 ? "?" : "&")
                        .Append(Uri.EscapeUriString(kvp.Key));
                    if (kvp.Value != null)
                        aggregate.Append("=").Append(Uri.EscapeUriString(kvp.Value.ToString()));
                    return aggregate;
                }).ToString();
                relativeUrl += queryString;
            }
            if (!Uri.TryCreate(BaseUrl, relativeUrl, out Uri serviceUrl))
                throw new UriFormatException($"Could not create an absolute URL from base URL '{BaseUrl}' and relative URL '{relativeUrl}'.");
            return serviceUrl;
        }
    }

    public static partial class __GlobalInitializer
    {
        public static void InitializeClient(HttpClient client)
        {
            DoInitializeClient(client);
        }

        static partial void DoInitializeClient(HttpClient client);

        public static void InitializeJsonSerializer(JsonSerializerSettings settings)
        {
            DoInitializeJsonSerializer(settings);
        }

        static partial void DoInitializeJsonSerializer(JsonSerializerSettings settings);
    }

    public class WebApiClientException : Exception
    {
        public WebApiClientException(string message, int statusCode, string response) : base(message)
        {
            StatusCode = statusCode;
            Response = response;
        }

        public int StatusCode { get; }

        public string Response { get; }
    }

    public sealed class WebApiClientException<TResult> : WebApiClientException
    {
        public WebApiClientException(string message, int statusCode, string response, TResult result) : base(message, statusCode, response)
        {
            Result = result;
        }

        public TResult Result { get; }
    }
}