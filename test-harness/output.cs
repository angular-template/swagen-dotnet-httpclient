// ReSharper disable All
// ------------------------------
// <auto-generated>
//     Generated using the Swagen tool
//     Generator: dotnet-httpclient
//     Mode: csharp
// </auto-generated>
// ------------------------------
// Swagger Petstore
// This is a sample server Petstore server.  You can find out more about Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).  For this sample, you can use the api key `special-key` to test the authorization filters.
// Base URL: https://petstore.swagger.io/v2/

using System;
using System.Collections.Generic;
using System.Linq;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text;
using System.Threading.Tasks;

using Newtonsoft.Json;
using Newtonsoft.Json.Serialization;

using MyNamespace.Services;

namespace MyNamespace.Services
{
    public interface Ipet
    {
        Task addPet(long version, Pet body);
        Task updatePet(Pet body);
        Task<IList<Pet>> findPetsByStatus(IList<status_Pet> status);
        Task<IList<Pet>> findPetsByTags(IList<string> tags);
        Task<Pet> getPetById(long petId);
        Task updatePetWithForm(long petId, string name = default(string), string status = default(string));
        Task deletePet(long petId, string api_key = default(string));
        Task<ApiResponse> uploadFile(long petId, string additionalMetadata = default(string), object file = default(object));
    }

    public interface Istore
    {
        Task<object> getInventory();
        Task<Order> placeOrder(Order body);
        Task<Order> getOrderById(long orderId);
        Task deleteOrder(long orderId);
    }

    public interface Iuser
    {
        Task createUser(User body);
        Task createUsersWithArrayInput(IList<User> body);
        Task createUsersWithListInput(IList<User> body);
        Task<string> loginUser(string username, string password);
        Task logoutUser();
        Task<User> getUserByName(string username);
        Task updateUser(string username, User body);
        Task deleteUser(string username);
    }
}

namespace MyNamespace.Services
{

    public sealed partial class pet : Ipet
    {
        private readonly HttpClient _client;
        private readonly JsonSerializerSettings _serializerSettings;
        private Uri _baseUrl = new Uri("https://petstore.swagger.io/v2/", UriKind.Absolute);

        public pet()
        {
            _client = new HttpClient();
            __GlobalInitializer.InitializeClient(_client);
            __InitializeClient(_client);
            _serializerSettings = new JsonSerializerSettings();
            __GlobalInitializer.InitializeJsonSerializer(_serializerSettings);
            __InitializeJsonSerializer(_serializerSettings);
        }

        public pet(HttpClient client)
        {
            _client = client;
            BaseUrl = _client.BaseAddress;
            __GlobalInitializer.InitializeClient(_client);
            __InitializeClient(_client);
            _serializerSettings = new JsonSerializerSettings();
            __GlobalInitializer.InitializeJsonSerializer(_serializerSettings);
            __InitializeJsonSerializer(_serializerSettings);
        }

        partial void __InitializeClient(HttpClient client);
        partial void __InitializeJsonSerializer(JsonSerializerSettings settings);

        public Uri BaseUrl
        {
            get => _baseUrl;
            set => _baseUrl = value ?? throw new ArgumentNullException(nameof(value));
        }

        public async Task addPet(long version, Pet body)
        {
            if (version == null)
                throw new ArgumentNullException(nameof(version));
            if (body == null)
                throw new ArgumentNullException(nameof(body));

            string _resourceUrl = "/pet";

            Uri _serviceUrl = BuildServiceUrl(_resourceUrl);

            using (var _request = new HttpRequestMessage(HttpMethod.Post, _serviceUrl))
            {
                var _content = new StringContent(JsonConvert.SerializeObject(body, _serializerSettings));
                _content.Headers.ContentType.MediaType = "application/json";
                _request.Content = _content;
                _request.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue("application/json"));
                _request.Headers.Add("version", version);

                HttpResponseMessage _response = await _client.SendAsync(_request).ConfigureAwait(false);

                int _statusCode = (int)_response.StatusCode;
                string _responseContent = await _response.Content.ReadAsStringAsync().ConfigureAwait(false);
                switch (_statusCode)
                {
                    case 405:
                        throw new WebApiClientException("A server side error occurred.", _statusCode, _responseContent);
                    default:
                        throw new WebApiClientException($"Unexpected status code {_statusCode} was returned from {_serviceUrl}", _statusCode, _responseContent);
                }
            }
        }

        public async Task updatePet(Pet body)
        {
            if (body == null)
                throw new ArgumentNullException(nameof(body));

            string _resourceUrl = "/pet";

            Uri _serviceUrl = BuildServiceUrl(_resourceUrl);

            using (var _request = new HttpRequestMessage(HttpMethod.Put, _serviceUrl))
            {
                var _content = new StringContent(JsonConvert.SerializeObject(body, _serializerSettings));
                _content.Headers.ContentType.MediaType = "application/json";
                _request.Content = _content;
                _request.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue("application/json"));

                HttpResponseMessage _response = await _client.SendAsync(_request).ConfigureAwait(false);

                int _statusCode = (int)_response.StatusCode;
                string _responseContent = await _response.Content.ReadAsStringAsync().ConfigureAwait(false);
                switch (_statusCode)
                {
                    case 400:
                        throw new WebApiClientException("A server side error occurred.", _statusCode, _responseContent);
                    case 404:
                        throw new WebApiClientException("A server side error occurred.", _statusCode, _responseContent);
                    case 405:
                        throw new WebApiClientException("A server side error occurred.", _statusCode, _responseContent);
                    default:
                        throw new WebApiClientException($"Unexpected status code {_statusCode} was returned from {_serviceUrl}", _statusCode, _responseContent);
                }
            }
        }

        public async Task<IList<Pet>> findPetsByStatus(IList<status_Pet> status)
        {
            if (status == null)
                throw new ArgumentNullException(nameof(status));

            string _resourceUrl = "/pet/findByStatus";

            var _queryParams = new Dictionary<string, object>
            {
                ["status"] = status,
            };

            Uri _serviceUrl = BuildServiceUrl(_resourceUrl, _queryParams);

            using (var _request = new HttpRequestMessage(HttpMethod.Get, _serviceUrl))
            {
                _request.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue("application/json"));

                HttpResponseMessage _response = await _client.SendAsync(_request).ConfigureAwait(false);

                int _statusCode = (int)_response.StatusCode;
                string _responseContent = await _response.Content.ReadAsStringAsync().ConfigureAwait(false);
                switch (_statusCode)
                {
                    case 200:
                        var _result200 = JsonConvert.DeserializeObject<IList<Pet>>(_responseContent, _serializerSettings);
                        return _result200;
                    case 400:
                        throw new WebApiClientException("A server side error occurred.", _statusCode, _responseContent);
                    default:
                        throw new WebApiClientException($"Unexpected status code {_statusCode} was returned from {_serviceUrl}", _statusCode, _responseContent);
                }
            }
        }

        public async Task<IList<Pet>> findPetsByTags(IList<string> tags)
        {
            if (tags == null)
                throw new ArgumentNullException(nameof(tags));

            string _resourceUrl = "/pet/findByTags";

            var _queryParams = new Dictionary<string, object>
            {
                ["tags"] = tags,
            };

            Uri _serviceUrl = BuildServiceUrl(_resourceUrl, _queryParams);

            using (var _request = new HttpRequestMessage(HttpMethod.Get, _serviceUrl))
            {
                _request.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue("application/json"));

                HttpResponseMessage _response = await _client.SendAsync(_request).ConfigureAwait(false);

                int _statusCode = (int)_response.StatusCode;
                string _responseContent = await _response.Content.ReadAsStringAsync().ConfigureAwait(false);
                switch (_statusCode)
                {
                    case 200:
                        var _result200 = JsonConvert.DeserializeObject<IList<Pet>>(_responseContent, _serializerSettings);
                        return _result200;
                    case 400:
                        throw new WebApiClientException("A server side error occurred.", _statusCode, _responseContent);
                    default:
                        throw new WebApiClientException($"Unexpected status code {_statusCode} was returned from {_serviceUrl}", _statusCode, _responseContent);
                }
            }
        }

        public async Task<Pet> getPetById(long petId)
        {
            if (petId == null)
                throw new ArgumentNullException(nameof(petId));

            string _resourceUrl = "/pet/{petId}"
                .Replace("{petId}", Uri.EscapeUriString(petId?.ToString()));

            Uri _serviceUrl = BuildServiceUrl(_resourceUrl);

            using (var _request = new HttpRequestMessage(HttpMethod.Get, _serviceUrl))
            {
                _request.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue("application/json"));

                HttpResponseMessage _response = await _client.SendAsync(_request).ConfigureAwait(false);

                int _statusCode = (int)_response.StatusCode;
                string _responseContent = await _response.Content.ReadAsStringAsync().ConfigureAwait(false);
                switch (_statusCode)
                {
                    case 200:
                        var _result200 = JsonConvert.DeserializeObject<Pet>(_responseContent, _serializerSettings);
                        return _result200;
                    case 400:
                        throw new WebApiClientException("A server side error occurred.", _statusCode, _responseContent);
                    case 404:
                        throw new WebApiClientException("A server side error occurred.", _statusCode, _responseContent);
                    default:
                        throw new WebApiClientException($"Unexpected status code {_statusCode} was returned from {_serviceUrl}", _statusCode, _responseContent);
                }
            }
        }

        public async Task updatePetWithForm(long petId, string name = default(string), string status = default(string))
        {
            if (petId == null)
                throw new ArgumentNullException(nameof(petId));

            string _resourceUrl = "/pet/{petId}"
                .Replace("{petId}", Uri.EscapeUriString(petId?.ToString()));

            Uri _serviceUrl = BuildServiceUrl(_resourceUrl);

            using (var _request = new HttpRequestMessage(HttpMethod.Post, _serviceUrl))
            {
                _request.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue("application/json"));

                HttpResponseMessage _response = await _client.SendAsync(_request).ConfigureAwait(false);

                int _statusCode = (int)_response.StatusCode;
                string _responseContent = await _response.Content.ReadAsStringAsync().ConfigureAwait(false);
                switch (_statusCode)
                {
                    case 405:
                        throw new WebApiClientException("A server side error occurred.", _statusCode, _responseContent);
                    default:
                        throw new WebApiClientException($"Unexpected status code {_statusCode} was returned from {_serviceUrl}", _statusCode, _responseContent);
                }
            }
        }

        public async Task deletePet(long petId, string api_key = default(string))
        {
            if (petId == null)
                throw new ArgumentNullException(nameof(petId));

            string _resourceUrl = "/pet/{petId}"
                .Replace("{petId}", Uri.EscapeUriString(petId?.ToString()));

            Uri _serviceUrl = BuildServiceUrl(_resourceUrl);

            using (var _request = new HttpRequestMessage(HttpMethod.Delete, _serviceUrl))
            {
                _request.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue("application/json"));
                _request.Headers.Add("api_key", api_key);

                HttpResponseMessage _response = await _client.SendAsync(_request).ConfigureAwait(false);

                int _statusCode = (int)_response.StatusCode;
                string _responseContent = await _response.Content.ReadAsStringAsync().ConfigureAwait(false);
                switch (_statusCode)
                {
                    case 400:
                        throw new WebApiClientException("A server side error occurred.", _statusCode, _responseContent);
                    case 404:
                        throw new WebApiClientException("A server side error occurred.", _statusCode, _responseContent);
                    default:
                        throw new WebApiClientException($"Unexpected status code {_statusCode} was returned from {_serviceUrl}", _statusCode, _responseContent);
                }
            }
        }

        public async Task<ApiResponse> uploadFile(long petId, string additionalMetadata = default(string), object file = default(object))
        {
            if (petId == null)
                throw new ArgumentNullException(nameof(petId));

            string _resourceUrl = "/pet/{petId}/uploadImage"
                .Replace("{petId}", Uri.EscapeUriString(petId?.ToString()));

            Uri _serviceUrl = BuildServiceUrl(_resourceUrl);

            using (var _request = new HttpRequestMessage(HttpMethod.Post, _serviceUrl))
            {
                _request.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue("application/json"));

                HttpResponseMessage _response = await _client.SendAsync(_request).ConfigureAwait(false);

                int _statusCode = (int)_response.StatusCode;
                string _responseContent = await _response.Content.ReadAsStringAsync().ConfigureAwait(false);
                switch (_statusCode)
                {
                    case 200:
                        var _result200 = JsonConvert.DeserializeObject<ApiResponse>(_responseContent, _serializerSettings);
                        return _result200;
                    default:
                        throw new WebApiClientException($"Unexpected status code {_statusCode} was returned from {_serviceUrl}", _statusCode, _responseContent);
                }
            }
        }

        private Uri BuildServiceUrl(string relativeUrl, IDictionary<string, object> queryParams = null)
        {
            relativeUrl = relativeUrl ?? "";
            if (relativeUrl.StartsWith("/"))
                relativeUrl = relativeUrl.Substring(1);
            if (queryParams?.Count > 0)
            {
                string queryString = queryParams.Aggregate(new StringBuilder(), (aggregate, kvp) =>
                {
                    aggregate.Append(aggregate.Length == 0 ? "?" : "&")
                        .Append(Uri.EscapeUriString(kvp.Key));
                    if (kvp.Value != null)
                        aggregate.Append("=").Append(Uri.EscapeUriString(kvp.Value.ToString()));
                    return aggregate;
                }).ToString();
                relativeUrl += queryString;
            }
            if (!Uri.TryCreate(BaseUrl, relativeUrl, out Uri serviceUrl))
                throw new UriFormatException($"Could not create an absolute URL from base URL '{BaseUrl}' and relative URL '{relativeUrl}'.");
            return serviceUrl;
        }
    }

    public sealed partial class store : Istore
    {
        private readonly HttpClient _client;
        private readonly JsonSerializerSettings _serializerSettings;
        private Uri _baseUrl = new Uri("https://petstore.swagger.io/v2/", UriKind.Absolute);

        public store()
        {
            _client = new HttpClient();
            __GlobalInitializer.InitializeClient(_client);
            __InitializeClient(_client);
            _serializerSettings = new JsonSerializerSettings();
            __GlobalInitializer.InitializeJsonSerializer(_serializerSettings);
            __InitializeJsonSerializer(_serializerSettings);
        }

        public store(HttpClient client)
        {
            _client = client;
            BaseUrl = _client.BaseAddress;
            __GlobalInitializer.InitializeClient(_client);
            __InitializeClient(_client);
            _serializerSettings = new JsonSerializerSettings();
            __GlobalInitializer.InitializeJsonSerializer(_serializerSettings);
            __InitializeJsonSerializer(_serializerSettings);
        }

        partial void __InitializeClient(HttpClient client);
        partial void __InitializeJsonSerializer(JsonSerializerSettings settings);

        public Uri BaseUrl
        {
            get => _baseUrl;
            set => _baseUrl = value ?? throw new ArgumentNullException(nameof(value));
        }

        public async Task<object> getInventory()
        {
            string _resourceUrl = "/store/inventory";

            Uri _serviceUrl = BuildServiceUrl(_resourceUrl);

            using (var _request = new HttpRequestMessage(HttpMethod.Get, _serviceUrl))
            {
                _request.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue("application/json"));

                HttpResponseMessage _response = await _client.SendAsync(_request).ConfigureAwait(false);

                int _statusCode = (int)_response.StatusCode;
                string _responseContent = await _response.Content.ReadAsStringAsync().ConfigureAwait(false);
                switch (_statusCode)
                {
                    case 200:
                        var _result200 = JsonConvert.DeserializeObject<object>(_responseContent, _serializerSettings);
                        return _result200;
                    default:
                        throw new WebApiClientException($"Unexpected status code {_statusCode} was returned from {_serviceUrl}", _statusCode, _responseContent);
                }
            }
        }

        public async Task<Order> placeOrder(Order body)
        {
            if (body == null)
                throw new ArgumentNullException(nameof(body));

            string _resourceUrl = "/store/order";

            Uri _serviceUrl = BuildServiceUrl(_resourceUrl);

            using (var _request = new HttpRequestMessage(HttpMethod.Post, _serviceUrl))
            {
                var _content = new StringContent(JsonConvert.SerializeObject(body, _serializerSettings));
                _content.Headers.ContentType.MediaType = "application/json";
                _request.Content = _content;
                _request.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue("application/json"));

                HttpResponseMessage _response = await _client.SendAsync(_request).ConfigureAwait(false);

                int _statusCode = (int)_response.StatusCode;
                string _responseContent = await _response.Content.ReadAsStringAsync().ConfigureAwait(false);
                switch (_statusCode)
                {
                    case 200:
                        var _result200 = JsonConvert.DeserializeObject<Order>(_responseContent, _serializerSettings);
                        return _result200;
                    case 400:
                        throw new WebApiClientException("A server side error occurred.", _statusCode, _responseContent);
                    default:
                        throw new WebApiClientException($"Unexpected status code {_statusCode} was returned from {_serviceUrl}", _statusCode, _responseContent);
                }
            }
        }

        public async Task<Order> getOrderById(long orderId)
        {
            if (orderId == null)
                throw new ArgumentNullException(nameof(orderId));

            string _resourceUrl = "/store/order/{orderId}"
                .Replace("{orderId}", Uri.EscapeUriString(orderId?.ToString()));

            Uri _serviceUrl = BuildServiceUrl(_resourceUrl);

            using (var _request = new HttpRequestMessage(HttpMethod.Get, _serviceUrl))
            {
                _request.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue("application/json"));

                HttpResponseMessage _response = await _client.SendAsync(_request).ConfigureAwait(false);

                int _statusCode = (int)_response.StatusCode;
                string _responseContent = await _response.Content.ReadAsStringAsync().ConfigureAwait(false);
                switch (_statusCode)
                {
                    case 200:
                        var _result200 = JsonConvert.DeserializeObject<Order>(_responseContent, _serializerSettings);
                        return _result200;
                    case 400:
                        throw new WebApiClientException("A server side error occurred.", _statusCode, _responseContent);
                    case 404:
                        throw new WebApiClientException("A server side error occurred.", _statusCode, _responseContent);
                    default:
                        throw new WebApiClientException($"Unexpected status code {_statusCode} was returned from {_serviceUrl}", _statusCode, _responseContent);
                }
            }
        }

        public async Task deleteOrder(long orderId)
        {
            if (orderId == null)
                throw new ArgumentNullException(nameof(orderId));

            string _resourceUrl = "/store/order/{orderId}"
                .Replace("{orderId}", Uri.EscapeUriString(orderId?.ToString()));

            Uri _serviceUrl = BuildServiceUrl(_resourceUrl);

            using (var _request = new HttpRequestMessage(HttpMethod.Delete, _serviceUrl))
            {
                _request.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue("application/json"));

                HttpResponseMessage _response = await _client.SendAsync(_request).ConfigureAwait(false);

                int _statusCode = (int)_response.StatusCode;
                string _responseContent = await _response.Content.ReadAsStringAsync().ConfigureAwait(false);
                switch (_statusCode)
                {
                    case 400:
                        throw new WebApiClientException("A server side error occurred.", _statusCode, _responseContent);
                    case 404:
                        throw new WebApiClientException("A server side error occurred.", _statusCode, _responseContent);
                    default:
                        throw new WebApiClientException($"Unexpected status code {_statusCode} was returned from {_serviceUrl}", _statusCode, _responseContent);
                }
            }
        }

        private Uri BuildServiceUrl(string relativeUrl, IDictionary<string, object> queryParams = null)
        {
            relativeUrl = relativeUrl ?? "";
            if (relativeUrl.StartsWith("/"))
                relativeUrl = relativeUrl.Substring(1);
            if (queryParams?.Count > 0)
            {
                string queryString = queryParams.Aggregate(new StringBuilder(), (aggregate, kvp) =>
                {
                    aggregate.Append(aggregate.Length == 0 ? "?" : "&")
                        .Append(Uri.EscapeUriString(kvp.Key));
                    if (kvp.Value != null)
                        aggregate.Append("=").Append(Uri.EscapeUriString(kvp.Value.ToString()));
                    return aggregate;
                }).ToString();
                relativeUrl += queryString;
            }
            if (!Uri.TryCreate(BaseUrl, relativeUrl, out Uri serviceUrl))
                throw new UriFormatException($"Could not create an absolute URL from base URL '{BaseUrl}' and relative URL '{relativeUrl}'.");
            return serviceUrl;
        }
    }

    public sealed partial class user : Iuser
    {
        private readonly HttpClient _client;
        private readonly JsonSerializerSettings _serializerSettings;
        private Uri _baseUrl = new Uri("https://petstore.swagger.io/v2/", UriKind.Absolute);

        public user()
        {
            _client = new HttpClient();
            __GlobalInitializer.InitializeClient(_client);
            __InitializeClient(_client);
            _serializerSettings = new JsonSerializerSettings();
            __GlobalInitializer.InitializeJsonSerializer(_serializerSettings);
            __InitializeJsonSerializer(_serializerSettings);
        }

        public user(HttpClient client)
        {
            _client = client;
            BaseUrl = _client.BaseAddress;
            __GlobalInitializer.InitializeClient(_client);
            __InitializeClient(_client);
            _serializerSettings = new JsonSerializerSettings();
            __GlobalInitializer.InitializeJsonSerializer(_serializerSettings);
            __InitializeJsonSerializer(_serializerSettings);
        }

        partial void __InitializeClient(HttpClient client);
        partial void __InitializeJsonSerializer(JsonSerializerSettings settings);

        public Uri BaseUrl
        {
            get => _baseUrl;
            set => _baseUrl = value ?? throw new ArgumentNullException(nameof(value));
        }

        public async Task createUser(User body)
        {
            if (body == null)
                throw new ArgumentNullException(nameof(body));

            string _resourceUrl = "/user";

            Uri _serviceUrl = BuildServiceUrl(_resourceUrl);

            using (var _request = new HttpRequestMessage(HttpMethod.Post, _serviceUrl))
            {
                var _content = new StringContent(JsonConvert.SerializeObject(body, _serializerSettings));
                _content.Headers.ContentType.MediaType = "application/json";
                _request.Content = _content;
                _request.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue("application/json"));

                HttpResponseMessage _response = await _client.SendAsync(_request).ConfigureAwait(false);

                int _statusCode = (int)_response.StatusCode;
                string _responseContent = await _response.Content.ReadAsStringAsync().ConfigureAwait(false);
                switch (_statusCode)
                {
                    case default:
                        throw new WebApiClientException("A server side error occurred.", _statusCode, _responseContent);
                    default:
                        throw new WebApiClientException($"Unexpected status code {_statusCode} was returned from {_serviceUrl}", _statusCode, _responseContent);
                }
            }
        }

        public async Task createUsersWithArrayInput(IList<User> body)
        {
            if (body == null)
                throw new ArgumentNullException(nameof(body));

            string _resourceUrl = "/user/createWithArray";

            Uri _serviceUrl = BuildServiceUrl(_resourceUrl);

            using (var _request = new HttpRequestMessage(HttpMethod.Post, _serviceUrl))
            {
                var _content = new StringContent(JsonConvert.SerializeObject(body, _serializerSettings));
                _content.Headers.ContentType.MediaType = "application/json";
                _request.Content = _content;
                _request.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue("application/json"));

                HttpResponseMessage _response = await _client.SendAsync(_request).ConfigureAwait(false);

                int _statusCode = (int)_response.StatusCode;
                string _responseContent = await _response.Content.ReadAsStringAsync().ConfigureAwait(false);
                switch (_statusCode)
                {
                    case default:
                        throw new WebApiClientException("A server side error occurred.", _statusCode, _responseContent);
                    default:
                        throw new WebApiClientException($"Unexpected status code {_statusCode} was returned from {_serviceUrl}", _statusCode, _responseContent);
                }
            }
        }

        public async Task createUsersWithListInput(IList<User> body)
        {
            if (body == null)
                throw new ArgumentNullException(nameof(body));

            string _resourceUrl = "/user/createWithList";

            Uri _serviceUrl = BuildServiceUrl(_resourceUrl);

            using (var _request = new HttpRequestMessage(HttpMethod.Post, _serviceUrl))
            {
                var _content = new StringContent(JsonConvert.SerializeObject(body, _serializerSettings));
                _content.Headers.ContentType.MediaType = "application/json";
                _request.Content = _content;
                _request.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue("application/json"));

                HttpResponseMessage _response = await _client.SendAsync(_request).ConfigureAwait(false);

                int _statusCode = (int)_response.StatusCode;
                string _responseContent = await _response.Content.ReadAsStringAsync().ConfigureAwait(false);
                switch (_statusCode)
                {
                    case default:
                        throw new WebApiClientException("A server side error occurred.", _statusCode, _responseContent);
                    default:
                        throw new WebApiClientException($"Unexpected status code {_statusCode} was returned from {_serviceUrl}", _statusCode, _responseContent);
                }
            }
        }

        public async Task<string> loginUser(string username, string password)
        {
            if (username == null)
                throw new ArgumentNullException(nameof(username));
            if (password == null)
                throw new ArgumentNullException(nameof(password));

            string _resourceUrl = "/user/login";

            var _queryParams = new Dictionary<string, object>
            {
                ["username"] = username,
                ["password"] = password,
            };

            Uri _serviceUrl = BuildServiceUrl(_resourceUrl, _queryParams);

            using (var _request = new HttpRequestMessage(HttpMethod.Get, _serviceUrl))
            {
                _request.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue("application/json"));

                HttpResponseMessage _response = await _client.SendAsync(_request).ConfigureAwait(false);

                int _statusCode = (int)_response.StatusCode;
                string _responseContent = await _response.Content.ReadAsStringAsync().ConfigureAwait(false);
                switch (_statusCode)
                {
                    case 200:
                        var _result200 = JsonConvert.DeserializeObject<string>(_responseContent, _serializerSettings);
                        return _result200;
                    case 400:
                        throw new WebApiClientException("A server side error occurred.", _statusCode, _responseContent);
                    default:
                        throw new WebApiClientException($"Unexpected status code {_statusCode} was returned from {_serviceUrl}", _statusCode, _responseContent);
                }
            }
        }

        public async Task logoutUser()
        {
            string _resourceUrl = "/user/logout";

            Uri _serviceUrl = BuildServiceUrl(_resourceUrl);

            using (var _request = new HttpRequestMessage(HttpMethod.Get, _serviceUrl))
            {
                _request.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue("application/json"));

                HttpResponseMessage _response = await _client.SendAsync(_request).ConfigureAwait(false);

                int _statusCode = (int)_response.StatusCode;
                string _responseContent = await _response.Content.ReadAsStringAsync().ConfigureAwait(false);
                switch (_statusCode)
                {
                    case default:
                        throw new WebApiClientException("A server side error occurred.", _statusCode, _responseContent);
                    default:
                        throw new WebApiClientException($"Unexpected status code {_statusCode} was returned from {_serviceUrl}", _statusCode, _responseContent);
                }
            }
        }

        public async Task<User> getUserByName(string username)
        {
            if (username == null)
                throw new ArgumentNullException(nameof(username));

            string _resourceUrl = "/user/{username}"
                .Replace("{username}", Uri.EscapeUriString(username?.ToString()));

            Uri _serviceUrl = BuildServiceUrl(_resourceUrl);

            using (var _request = new HttpRequestMessage(HttpMethod.Get, _serviceUrl))
            {
                _request.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue("application/json"));

                HttpResponseMessage _response = await _client.SendAsync(_request).ConfigureAwait(false);

                int _statusCode = (int)_response.StatusCode;
                string _responseContent = await _response.Content.ReadAsStringAsync().ConfigureAwait(false);
                switch (_statusCode)
                {
                    case 200:
                        var _result200 = JsonConvert.DeserializeObject<User>(_responseContent, _serializerSettings);
                        return _result200;
                    case 400:
                        throw new WebApiClientException("A server side error occurred.", _statusCode, _responseContent);
                    case 404:
                        throw new WebApiClientException("A server side error occurred.", _statusCode, _responseContent);
                    default:
                        throw new WebApiClientException($"Unexpected status code {_statusCode} was returned from {_serviceUrl}", _statusCode, _responseContent);
                }
            }
        }

        public async Task updateUser(string username, User body)
        {
            if (username == null)
                throw new ArgumentNullException(nameof(username));
            if (body == null)
                throw new ArgumentNullException(nameof(body));

            string _resourceUrl = "/user/{username}"
                .Replace("{username}", Uri.EscapeUriString(username?.ToString()));

            Uri _serviceUrl = BuildServiceUrl(_resourceUrl);

            using (var _request = new HttpRequestMessage(HttpMethod.Put, _serviceUrl))
            {
                var _content = new StringContent(JsonConvert.SerializeObject(body, _serializerSettings));
                _content.Headers.ContentType.MediaType = "application/json";
                _request.Content = _content;
                _request.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue("application/json"));

                HttpResponseMessage _response = await _client.SendAsync(_request).ConfigureAwait(false);

                int _statusCode = (int)_response.StatusCode;
                string _responseContent = await _response.Content.ReadAsStringAsync().ConfigureAwait(false);
                switch (_statusCode)
                {
                    case 400:
                        throw new WebApiClientException("A server side error occurred.", _statusCode, _responseContent);
                    case 404:
                        throw new WebApiClientException("A server side error occurred.", _statusCode, _responseContent);
                    default:
                        throw new WebApiClientException($"Unexpected status code {_statusCode} was returned from {_serviceUrl}", _statusCode, _responseContent);
                }
            }
        }

        public async Task deleteUser(string username)
        {
            if (username == null)
                throw new ArgumentNullException(nameof(username));

            string _resourceUrl = "/user/{username}"
                .Replace("{username}", Uri.EscapeUriString(username?.ToString()));

            Uri _serviceUrl = BuildServiceUrl(_resourceUrl);

            using (var _request = new HttpRequestMessage(HttpMethod.Delete, _serviceUrl))
            {
                _request.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue("application/json"));

                HttpResponseMessage _response = await _client.SendAsync(_request).ConfigureAwait(false);

                int _statusCode = (int)_response.StatusCode;
                string _responseContent = await _response.Content.ReadAsStringAsync().ConfigureAwait(false);
                switch (_statusCode)
                {
                    case 400:
                        throw new WebApiClientException("A server side error occurred.", _statusCode, _responseContent);
                    case 404:
                        throw new WebApiClientException("A server side error occurred.", _statusCode, _responseContent);
                    default:
                        throw new WebApiClientException($"Unexpected status code {_statusCode} was returned from {_serviceUrl}", _statusCode, _responseContent);
                }
            }
        }

        private Uri BuildServiceUrl(string relativeUrl, IDictionary<string, object> queryParams = null)
        {
            relativeUrl = relativeUrl ?? "";
            if (relativeUrl.StartsWith("/"))
                relativeUrl = relativeUrl.Substring(1);
            if (queryParams?.Count > 0)
            {
                string queryString = queryParams.Aggregate(new StringBuilder(), (aggregate, kvp) =>
                {
                    aggregate.Append(aggregate.Length == 0 ? "?" : "&")
                        .Append(Uri.EscapeUriString(kvp.Key));
                    if (kvp.Value != null)
                        aggregate.Append("=").Append(Uri.EscapeUriString(kvp.Value.ToString()));
                    return aggregate;
                }).ToString();
                relativeUrl += queryString;
            }
            if (!Uri.TryCreate(BaseUrl, relativeUrl, out Uri serviceUrl))
                throw new UriFormatException($"Could not create an absolute URL from base URL '{BaseUrl}' and relative URL '{relativeUrl}'.");
            return serviceUrl;
        }
    }

    public static partial class __GlobalInitializer
    {
        public static void InitializeClient(HttpClient client)
        {
            DoInitializeClient(client);
        }

        static partial void DoInitializeClient(HttpClient client);

        public static void InitializeJsonSerializer(JsonSerializerSettings settings)
        {
            DoInitializeJsonSerializer(settings);
        }

        static partial void DoInitializeJsonSerializer(JsonSerializerSettings settings);
    }

    public class WebApiClientException : Exception
    {
        public WebApiClientException(string message, int statusCode, string response) : base(message)
        {
            StatusCode = statusCode;
            Response = response;
        }

        public int StatusCode { get; }

        public string Response { get; }
    }

    public sealed class WebApiClientException<TResult> : WebApiClientException
    {
        public WebApiClientException(string message, int statusCode, string response, TResult result) : base(message, statusCode, response)
        {
            Result = result;
        }

        public TResult Result { get; }
    }
}

namespace MyNamespace.Services
{
    [JsonObject(MemberSerialization.OptIn)]
    public partial class ApiResponse
    {

        [JsonProperty("code", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public int code { get; set; }


        [JsonProperty("type", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string type { get; set; }


        [JsonProperty("message", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string message { get; set; }

    }
    [JsonObject(MemberSerialization.OptIn)]
    public partial class Category
    {

        [JsonProperty("id", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public long id { get; set; }


        [JsonProperty("name", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string name { get; set; }

    }
    [JsonObject(MemberSerialization.OptIn)]
    public partial class Order
    {

        [JsonProperty("id", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public long id { get; set; }


        [JsonProperty("petId", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public long petId { get; set; }


        [JsonProperty("quantity", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public int quantity { get; set; }


        [JsonProperty("shipDate", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public DateTime shipDate { get; set; }


        [JsonProperty("status", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public status_Order status { get; set; }


        [JsonProperty("complete", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public bool complete { get; set; }

    }
    [JsonObject(MemberSerialization.OptIn)]
    public partial class Pet
    {

        [JsonProperty("id", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public long id { get; set; }


        [JsonProperty("category", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public Category category { get; set; }


        [JsonProperty("name", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string name { get; set; }

        private IList<string> _photoUrls;

        [JsonProperty("photoUrls", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public IList<string> photoUrls
        {
            get => _photoUrls ?? (_photoUrls = new List<string>());
            set => _photoUrls = value;
        }

        private IList<Tag> _tags;

        [JsonProperty("tags", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public IList<Tag> tags
        {
            get => _tags ?? (_tags = new List<Tag>());
            set => _tags = value;
        }


        [JsonProperty("status", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public status_Pet status { get; set; }

    }
    [JsonObject(MemberSerialization.OptIn)]
    public partial class Tag
    {

        [JsonProperty("id", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public long id { get; set; }


        [JsonProperty("name", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string name { get; set; }

    }
    [JsonObject(MemberSerialization.OptIn)]
    public partial class User
    {

        [JsonProperty("id", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public long id { get; set; }


        [JsonProperty("username", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string username { get; set; }


        [JsonProperty("firstName", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string firstName { get; set; }


        [JsonProperty("lastName", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string lastName { get; set; }


        [JsonProperty("email", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string email { get; set; }


        [JsonProperty("password", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string password { get; set; }


        [JsonProperty("phone", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string phone { get; set; }


        [JsonProperty("userStatus", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public int userStatus { get; set; }

    }

    public enum status_Order
    {
        placed,
        approved,
        delivered,
    }
    public enum status_Pet
    {
        available,
        pending,
        sold,
    }
}